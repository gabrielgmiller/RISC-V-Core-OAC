$date
	Mon Aug  4 11:59:37 2025
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module pipeline_complete_testbench $end
$var reg 1 ! reset $end
$var integer 32 " cycle_count [31:0] $end
$var integer 32 # i [31:0] $end
$scope module UUT $end
$var wire 1 $ EX_MEM_RegWrite_wire $end
$var wire 5 % EX_MEM_rd_wire [4:0] $end
$var wire 1 & ID_EX_MemRead_wire $end
$var wire 5 ' ID_EX_rd_wire [4:0] $end
$var wire 32 ( alu_input1 [31:0] $end
$var wire 32 ) ex_mem_alu_result [31:0] $end
$var wire 1 ! reset $end
$var wire 1 * zero_mem $end
$var wire 1 + zero $end
$var wire 32 , write_data_wb [31:0] $end
$var wire 32 - write_data_mem [31:0] $end
$var wire 5 . rs2_id [4:0] $end
$var wire 5 / rs2_ex [4:0] $end
$var wire 5 0 rs1_id [4:0] $end
$var wire 5 1 rs1_ex [4:0] $end
$var wire 32 2 read_data_wb_reg [31:0] $end
$var wire 32 3 read_data_mem [31:0] $end
$var wire 32 4 read_data2_id [31:0] $end
$var wire 32 5 read_data2_ex [31:0] $end
$var wire 32 6 read_data1_id [31:0] $end
$var wire 32 7 read_data1_ex [31:0] $end
$var wire 5 8 rd_wb [4:0] $end
$var wire 5 9 rd_mem [4:0] $end
$var wire 5 : rd_id [4:0] $end
$var wire 5 ; rd_ex [4:0] $end
$var wire 32 < pc_plus4 [31:0] $end
$var wire 32 = pc_next [31:0] $end
$var wire 32 > pc_id [31:0] $end
$var wire 32 ? pc_ex [31:0] $end
$var wire 32 @ pc_current [31:0] $end
$var wire 32 A instruction_if [31:0] $end
$var wire 32 B instruction_id [31:0] $end
$var wire 32 C immediate_id [31:0] $end
$var wire 32 D immediate_ex [31:0] $end
$var wire 4 E funct_id [3:0] $end
$var wire 4 F funct_ex [3:0] $end
$var wire 32 G forward_data2 [31:0] $end
$var wire 32 H forward_data1 [31:0] $end
$var wire 1 I clk $end
$var wire 32 J branch_target_mem [31:0] $end
$var wire 32 K branch_target [31:0] $end
$var wire 32 L alu_result_wb [31:0] $end
$var wire 32 M alu_result_mem [31:0] $end
$var wire 32 N alu_result [31:0] $end
$var wire 32 O alu_input2 [31:0] $end
$var wire 4 P alu_control [3:0] $end
$var wire 1 Q RegWrite_wb $end
$var wire 1 R RegWrite_mem $end
$var wire 1 S RegWrite_id_mux $end
$var wire 1 T RegWrite_id $end
$var wire 1 U RegWrite_ex $end
$var wire 1 V PCWrite $end
$var wire 1 W PCSrc $end
$var wire 1 X MemWrite_mem $end
$var wire 1 Y MemWrite_id_mux $end
$var wire 1 Z MemWrite_id $end
$var wire 1 [ MemWrite_ex $end
$var wire 1 \ MemToReg_wb_reg $end
$var wire 1 ] MemToReg_mem $end
$var wire 1 ^ MemToReg_id_mux $end
$var wire 1 _ MemToReg_id $end
$var wire 1 ` MemToReg_ex $end
$var wire 1 a MemRead_mem $end
$var wire 1 b MemRead_id_mux $end
$var wire 1 c MemRead_id $end
$var wire 1 d MemRead_ex $end
$var wire 1 e Jump_mem $end
$var wire 1 f Jump_id_mux $end
$var wire 1 g Jump_id $end
$var wire 1 h Jump_ex $end
$var wire 1 i IF_ID_Write $end
$var wire 1 j IF_ID_Flush $end
$var wire 1 k ID_EX_Flush $end
$var wire 2 l ForwardB [1:0] $end
$var wire 2 m ForwardA [1:0] $end
$var wire 1 n ControlMux $end
$var wire 1 o Branch_mem $end
$var wire 1 p Branch_id_mux $end
$var wire 1 q Branch_id $end
$var wire 1 r Branch_ex $end
$var wire 1 s ALUSrc_id_mux $end
$var wire 1 t ALUSrc_id $end
$var wire 1 u ALUSrc_ex $end
$var wire 2 v ALUOp_id_mux [1:0] $end
$var wire 2 w ALUOp_id [1:0] $end
$var wire 2 x ALUOp_ex [1:0] $end
$scope module alu_ctrl $end
$var wire 1 y sel_add $end
$var wire 1 z sel_and $end
$var wire 1 { sel_or $end
$var wire 1 | sel_ori $end
$var wire 1 } sel_srl $end
$var wire 1 ~ sel_sub $end
$var wire 4 !" operation [3:0] $end
$var wire 1 "" isR $end
$var wire 1 #" isLS $end
$var wire 1 $" isI $end
$var wire 1 %" isBranch $end
$var wire 4 &" funct [3:0] $end
$var wire 1 '" f7_5 $end
$var wire 3 (" f3 [2:0] $end
$var wire 2 )" ALUOp [1:0] $end
$upscope $end
$scope module alu_src_mux $end
$var wire 1 u select $end
$var wire 32 *" result [31:0] $end
$var wire 32 +" B [31:0] $end
$var wire 32 ," A [31:0] $end
$upscope $end
$scope module alu_unit $end
$var wire 32 -" A [31:0] $end
$var wire 4 ." ALUOp [3:0] $end
$var wire 32 /" B [31:0] $end
$var wire 1 + zero $end
$var wire 32 0" result [31:0] $end
$var wire 32 1" resSub [31:0] $end
$var wire 32 2" resSrl [31:0] $end
$var wire 32 3" resOr [31:0] $end
$var wire 32 4" resAnd [31:0] $end
$var wire 32 5" resAdd [31:0] $end
$scope begin MUX_BIT[0] $end
$var wire 1 6" sel_add $end
$var wire 1 7" sel_and $end
$var wire 1 8" sel_or $end
$var wire 1 9" sel_srl $end
$var wire 1 :" sel_sub $end
$var parameter 2 ;" i $end
$upscope $end
$scope begin MUX_BIT[1] $end
$var wire 1 <" sel_add $end
$var wire 1 =" sel_and $end
$var wire 1 >" sel_or $end
$var wire 1 ?" sel_srl $end
$var wire 1 @" sel_sub $end
$var parameter 2 A" i $end
$upscope $end
$scope begin MUX_BIT[2] $end
$var wire 1 B" sel_add $end
$var wire 1 C" sel_and $end
$var wire 1 D" sel_or $end
$var wire 1 E" sel_srl $end
$var wire 1 F" sel_sub $end
$var parameter 3 G" i $end
$upscope $end
$scope begin MUX_BIT[3] $end
$var wire 1 H" sel_add $end
$var wire 1 I" sel_and $end
$var wire 1 J" sel_or $end
$var wire 1 K" sel_srl $end
$var wire 1 L" sel_sub $end
$var parameter 3 M" i $end
$upscope $end
$scope begin MUX_BIT[4] $end
$var wire 1 N" sel_add $end
$var wire 1 O" sel_and $end
$var wire 1 P" sel_or $end
$var wire 1 Q" sel_srl $end
$var wire 1 R" sel_sub $end
$var parameter 4 S" i $end
$upscope $end
$scope begin MUX_BIT[5] $end
$var wire 1 T" sel_add $end
$var wire 1 U" sel_and $end
$var wire 1 V" sel_or $end
$var wire 1 W" sel_srl $end
$var wire 1 X" sel_sub $end
$var parameter 4 Y" i $end
$upscope $end
$scope begin MUX_BIT[6] $end
$var wire 1 Z" sel_add $end
$var wire 1 [" sel_and $end
$var wire 1 \" sel_or $end
$var wire 1 ]" sel_srl $end
$var wire 1 ^" sel_sub $end
$var parameter 4 _" i $end
$upscope $end
$scope begin MUX_BIT[7] $end
$var wire 1 `" sel_add $end
$var wire 1 a" sel_and $end
$var wire 1 b" sel_or $end
$var wire 1 c" sel_srl $end
$var wire 1 d" sel_sub $end
$var parameter 4 e" i $end
$upscope $end
$scope begin MUX_BIT[8] $end
$var wire 1 f" sel_add $end
$var wire 1 g" sel_and $end
$var wire 1 h" sel_or $end
$var wire 1 i" sel_srl $end
$var wire 1 j" sel_sub $end
$var parameter 5 k" i $end
$upscope $end
$scope begin MUX_BIT[9] $end
$var wire 1 l" sel_add $end
$var wire 1 m" sel_and $end
$var wire 1 n" sel_or $end
$var wire 1 o" sel_srl $end
$var wire 1 p" sel_sub $end
$var parameter 5 q" i $end
$upscope $end
$scope begin MUX_BIT[10] $end
$var wire 1 r" sel_add $end
$var wire 1 s" sel_and $end
$var wire 1 t" sel_or $end
$var wire 1 u" sel_srl $end
$var wire 1 v" sel_sub $end
$var parameter 5 w" i $end
$upscope $end
$scope begin MUX_BIT[11] $end
$var wire 1 x" sel_add $end
$var wire 1 y" sel_and $end
$var wire 1 z" sel_or $end
$var wire 1 {" sel_srl $end
$var wire 1 |" sel_sub $end
$var parameter 5 }" i $end
$upscope $end
$scope begin MUX_BIT[12] $end
$var wire 1 ~" sel_add $end
$var wire 1 !# sel_and $end
$var wire 1 "# sel_or $end
$var wire 1 ## sel_srl $end
$var wire 1 $# sel_sub $end
$var parameter 5 %# i $end
$upscope $end
$scope begin MUX_BIT[13] $end
$var wire 1 &# sel_add $end
$var wire 1 '# sel_and $end
$var wire 1 (# sel_or $end
$var wire 1 )# sel_srl $end
$var wire 1 *# sel_sub $end
$var parameter 5 +# i $end
$upscope $end
$scope begin MUX_BIT[14] $end
$var wire 1 ,# sel_add $end
$var wire 1 -# sel_and $end
$var wire 1 .# sel_or $end
$var wire 1 /# sel_srl $end
$var wire 1 0# sel_sub $end
$var parameter 5 1# i $end
$upscope $end
$scope begin MUX_BIT[15] $end
$var wire 1 2# sel_add $end
$var wire 1 3# sel_and $end
$var wire 1 4# sel_or $end
$var wire 1 5# sel_srl $end
$var wire 1 6# sel_sub $end
$var parameter 5 7# i $end
$upscope $end
$scope begin MUX_BIT[16] $end
$var wire 1 8# sel_add $end
$var wire 1 9# sel_and $end
$var wire 1 :# sel_or $end
$var wire 1 ;# sel_srl $end
$var wire 1 <# sel_sub $end
$var parameter 6 =# i $end
$upscope $end
$scope begin MUX_BIT[17] $end
$var wire 1 ># sel_add $end
$var wire 1 ?# sel_and $end
$var wire 1 @# sel_or $end
$var wire 1 A# sel_srl $end
$var wire 1 B# sel_sub $end
$var parameter 6 C# i $end
$upscope $end
$scope begin MUX_BIT[18] $end
$var wire 1 D# sel_add $end
$var wire 1 E# sel_and $end
$var wire 1 F# sel_or $end
$var wire 1 G# sel_srl $end
$var wire 1 H# sel_sub $end
$var parameter 6 I# i $end
$upscope $end
$scope begin MUX_BIT[19] $end
$var wire 1 J# sel_add $end
$var wire 1 K# sel_and $end
$var wire 1 L# sel_or $end
$var wire 1 M# sel_srl $end
$var wire 1 N# sel_sub $end
$var parameter 6 O# i $end
$upscope $end
$scope begin MUX_BIT[20] $end
$var wire 1 P# sel_add $end
$var wire 1 Q# sel_and $end
$var wire 1 R# sel_or $end
$var wire 1 S# sel_srl $end
$var wire 1 T# sel_sub $end
$var parameter 6 U# i $end
$upscope $end
$scope begin MUX_BIT[21] $end
$var wire 1 V# sel_add $end
$var wire 1 W# sel_and $end
$var wire 1 X# sel_or $end
$var wire 1 Y# sel_srl $end
$var wire 1 Z# sel_sub $end
$var parameter 6 [# i $end
$upscope $end
$scope begin MUX_BIT[22] $end
$var wire 1 \# sel_add $end
$var wire 1 ]# sel_and $end
$var wire 1 ^# sel_or $end
$var wire 1 _# sel_srl $end
$var wire 1 `# sel_sub $end
$var parameter 6 a# i $end
$upscope $end
$scope begin MUX_BIT[23] $end
$var wire 1 b# sel_add $end
$var wire 1 c# sel_and $end
$var wire 1 d# sel_or $end
$var wire 1 e# sel_srl $end
$var wire 1 f# sel_sub $end
$var parameter 6 g# i $end
$upscope $end
$scope begin MUX_BIT[24] $end
$var wire 1 h# sel_add $end
$var wire 1 i# sel_and $end
$var wire 1 j# sel_or $end
$var wire 1 k# sel_srl $end
$var wire 1 l# sel_sub $end
$var parameter 6 m# i $end
$upscope $end
$scope begin MUX_BIT[25] $end
$var wire 1 n# sel_add $end
$var wire 1 o# sel_and $end
$var wire 1 p# sel_or $end
$var wire 1 q# sel_srl $end
$var wire 1 r# sel_sub $end
$var parameter 6 s# i $end
$upscope $end
$scope begin MUX_BIT[26] $end
$var wire 1 t# sel_add $end
$var wire 1 u# sel_and $end
$var wire 1 v# sel_or $end
$var wire 1 w# sel_srl $end
$var wire 1 x# sel_sub $end
$var parameter 6 y# i $end
$upscope $end
$scope begin MUX_BIT[27] $end
$var wire 1 z# sel_add $end
$var wire 1 {# sel_and $end
$var wire 1 |# sel_or $end
$var wire 1 }# sel_srl $end
$var wire 1 ~# sel_sub $end
$var parameter 6 !$ i $end
$upscope $end
$scope begin MUX_BIT[28] $end
$var wire 1 "$ sel_add $end
$var wire 1 #$ sel_and $end
$var wire 1 $$ sel_or $end
$var wire 1 %$ sel_srl $end
$var wire 1 &$ sel_sub $end
$var parameter 6 '$ i $end
$upscope $end
$scope begin MUX_BIT[29] $end
$var wire 1 ($ sel_add $end
$var wire 1 )$ sel_and $end
$var wire 1 *$ sel_or $end
$var wire 1 +$ sel_srl $end
$var wire 1 ,$ sel_sub $end
$var parameter 6 -$ i $end
$upscope $end
$scope begin MUX_BIT[30] $end
$var wire 1 .$ sel_add $end
$var wire 1 /$ sel_and $end
$var wire 1 0$ sel_or $end
$var wire 1 1$ sel_srl $end
$var wire 1 2$ sel_sub $end
$var parameter 6 3$ i $end
$upscope $end
$scope begin MUX_BIT[31] $end
$var wire 1 4$ sel_add $end
$var wire 1 5$ sel_and $end
$var wire 1 6$ sel_or $end
$var wire 1 7$ sel_srl $end
$var wire 1 8$ sel_sub $end
$var parameter 6 9$ i $end
$upscope $end
$scope module adder $end
$var wire 32 :$ A [31:0] $end
$var wire 32 ;$ B [31:0] $end
$var wire 32 <$ result [31:0] $end
$var wire 1 =$ Cout $end
$upscope $end
$scope module andmod $end
$var wire 32 >$ A [31:0] $end
$var wire 32 ?$ B [31:0] $end
$var wire 32 @$ result [31:0] $end
$scope begin genblk1[0] $end
$var parameter 2 A$ i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 B$ i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 C$ i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 D$ i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 E$ i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 F$ i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 G$ i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 H$ i $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 I$ i $end
$upscope $end
$scope begin genblk1[9] $end
$var parameter 5 J$ i $end
$upscope $end
$scope begin genblk1[10] $end
$var parameter 5 K$ i $end
$upscope $end
$scope begin genblk1[11] $end
$var parameter 5 L$ i $end
$upscope $end
$scope begin genblk1[12] $end
$var parameter 5 M$ i $end
$upscope $end
$scope begin genblk1[13] $end
$var parameter 5 N$ i $end
$upscope $end
$scope begin genblk1[14] $end
$var parameter 5 O$ i $end
$upscope $end
$scope begin genblk1[15] $end
$var parameter 5 P$ i $end
$upscope $end
$scope begin genblk1[16] $end
$var parameter 6 Q$ i $end
$upscope $end
$scope begin genblk1[17] $end
$var parameter 6 R$ i $end
$upscope $end
$scope begin genblk1[18] $end
$var parameter 6 S$ i $end
$upscope $end
$scope begin genblk1[19] $end
$var parameter 6 T$ i $end
$upscope $end
$scope begin genblk1[20] $end
$var parameter 6 U$ i $end
$upscope $end
$scope begin genblk1[21] $end
$var parameter 6 V$ i $end
$upscope $end
$scope begin genblk1[22] $end
$var parameter 6 W$ i $end
$upscope $end
$scope begin genblk1[23] $end
$var parameter 6 X$ i $end
$upscope $end
$scope begin genblk1[24] $end
$var parameter 6 Y$ i $end
$upscope $end
$scope begin genblk1[25] $end
$var parameter 6 Z$ i $end
$upscope $end
$scope begin genblk1[26] $end
$var parameter 6 [$ i $end
$upscope $end
$scope begin genblk1[27] $end
$var parameter 6 \$ i $end
$upscope $end
$scope begin genblk1[28] $end
$var parameter 6 ]$ i $end
$upscope $end
$scope begin genblk1[29] $end
$var parameter 6 ^$ i $end
$upscope $end
$scope begin genblk1[30] $end
$var parameter 6 _$ i $end
$upscope $end
$scope begin genblk1[31] $end
$var parameter 6 `$ i $end
$upscope $end
$upscope $end
$scope module ormod $end
$var wire 32 a$ A [31:0] $end
$var wire 32 b$ B [31:0] $end
$var wire 32 c$ result [31:0] $end
$scope begin genblk1[0] $end
$var parameter 2 d$ i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 e$ i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 f$ i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 g$ i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 h$ i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 i$ i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 j$ i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 k$ i $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 l$ i $end
$upscope $end
$scope begin genblk1[9] $end
$var parameter 5 m$ i $end
$upscope $end
$scope begin genblk1[10] $end
$var parameter 5 n$ i $end
$upscope $end
$scope begin genblk1[11] $end
$var parameter 5 o$ i $end
$upscope $end
$scope begin genblk1[12] $end
$var parameter 5 p$ i $end
$upscope $end
$scope begin genblk1[13] $end
$var parameter 5 q$ i $end
$upscope $end
$scope begin genblk1[14] $end
$var parameter 5 r$ i $end
$upscope $end
$scope begin genblk1[15] $end
$var parameter 5 s$ i $end
$upscope $end
$scope begin genblk1[16] $end
$var parameter 6 t$ i $end
$upscope $end
$scope begin genblk1[17] $end
$var parameter 6 u$ i $end
$upscope $end
$scope begin genblk1[18] $end
$var parameter 6 v$ i $end
$upscope $end
$scope begin genblk1[19] $end
$var parameter 6 w$ i $end
$upscope $end
$scope begin genblk1[20] $end
$var parameter 6 x$ i $end
$upscope $end
$scope begin genblk1[21] $end
$var parameter 6 y$ i $end
$upscope $end
$scope begin genblk1[22] $end
$var parameter 6 z$ i $end
$upscope $end
$scope begin genblk1[23] $end
$var parameter 6 {$ i $end
$upscope $end
$scope begin genblk1[24] $end
$var parameter 6 |$ i $end
$upscope $end
$scope begin genblk1[25] $end
$var parameter 6 }$ i $end
$upscope $end
$scope begin genblk1[26] $end
$var parameter 6 ~$ i $end
$upscope $end
$scope begin genblk1[27] $end
$var parameter 6 !% i $end
$upscope $end
$scope begin genblk1[28] $end
$var parameter 6 "% i $end
$upscope $end
$scope begin genblk1[29] $end
$var parameter 6 #% i $end
$upscope $end
$scope begin genblk1[30] $end
$var parameter 6 $% i $end
$upscope $end
$scope begin genblk1[31] $end
$var parameter 6 %% i $end
$upscope $end
$upscope $end
$scope module srlmod $end
$var wire 32 &% A [31:0] $end
$var wire 32 '% B [31:0] $end
$var wire 32 (% result [31:0] $end
$upscope $end
$scope module subtract $end
$var wire 32 )% A [31:0] $end
$var wire 32 *% B [31:0] $end
$var wire 32 +% result [31:0] $end
$var wire 1 ,% Cout $end
$upscope $end
$upscope $end
$scope module branch_adder $end
$var wire 32 -% result [31:0] $end
$var wire 1 .% Cout $end
$var wire 32 /% B [31:0] $end
$var wire 32 0% A [31:0] $end
$upscope $end
$scope module branch_ctrl $end
$var wire 1 k ID_EX_Flush $end
$var wire 1 j IF_ID_Flush $end
$var wire 1 W PCSrc $end
$var wire 1 1% branch_taken $end
$var wire 1 * zero $end
$var wire 1 e Jump $end
$var wire 1 o Branch $end
$upscope $end
$scope module clkgen $end
$var reg 1 I clk $end
$upscope $end
$scope module control_unit $end
$var wire 1 t ALUSrc $end
$var wire 1 q Branch $end
$var wire 1 g Jump $end
$var wire 1 c MemRead $end
$var wire 1 _ MemToReg $end
$var wire 1 Z MemWrite $end
$var wire 7 2% Op [6:0] $end
$var wire 1 T RegWrite $end
$var wire 1 3% Store $end
$var wire 1 4% R_type $end
$var wire 1 5% Load $end
$var wire 1 6% Jump_type $end
$var wire 1 7% I_arith $end
$var wire 1 8% Branch_type $end
$var wire 2 9% ALUOp [1:0] $end
$upscope $end
$scope module data_mem $end
$var wire 1 I clk $end
$var wire 32 :% write_data [31:0] $end
$var wire 1 X mem_write $end
$var wire 1 a mem_read $end
$var wire 32 ;% endereco [31:0] $end
$var reg 32 <% read_data [31:0] $end
$var integer 32 =% i [31:0] $end
$upscope $end
$scope module ex_mem_reg $end
$var wire 32 >% alu_result_in [31:0] $end
$var wire 32 ?% branch_target_in [31:0] $end
$var wire 1 I clk $end
$var wire 1 ! reset $end
$var wire 1 + zero_in $end
$var wire 32 @% write_data_in [31:0] $end
$var wire 5 A% rd_in [4:0] $end
$var wire 1 U RegWrite_in $end
$var wire 1 [ MemWrite_in $end
$var wire 1 ` MemToReg_in $end
$var wire 1 d MemRead_in $end
$var wire 1 h Jump_in $end
$var wire 1 r Branch_in $end
$var reg 1 o Branch_out $end
$var reg 1 e Jump_out $end
$var reg 1 a MemRead_out $end
$var reg 1 ] MemToReg_out $end
$var reg 1 X MemWrite_out $end
$var reg 1 R RegWrite_out $end
$var reg 32 B% alu_result_out [31:0] $end
$var reg 32 C% branch_target_out [31:0] $end
$var reg 5 D% rd_out [4:0] $end
$var reg 32 E% write_data_out [31:0] $end
$var reg 1 * zero_out $end
$upscope $end
$scope module forward_mux_a $end
$var wire 32 F% ex_mem_data [31:0] $end
$var wire 32 G% reg_data [31:0] $end
$var wire 32 H% mem_wb_data [31:0] $end
$var wire 2 I% forward_sel [1:0] $end
$var reg 32 J% result [31:0] $end
$upscope $end
$scope module forward_mux_b $end
$var wire 32 K% ex_mem_data [31:0] $end
$var wire 32 L% reg_data [31:0] $end
$var wire 32 M% mem_wb_data [31:0] $end
$var wire 2 N% forward_sel [1:0] $end
$var reg 32 O% result [31:0] $end
$upscope $end
$scope module forward_unit $end
$var wire 1 $ EX_MEM_RegWrite $end
$var wire 5 P% EX_MEM_rd [4:0] $end
$var wire 5 Q% MEM_WB_rd [4:0] $end
$var wire 1 Q MEM_WB_RegWrite $end
$var wire 5 R% ID_EX_rs2 [4:0] $end
$var wire 5 S% ID_EX_rs1 [4:0] $end
$var reg 2 T% ForwardA [1:0] $end
$var reg 2 U% ForwardB [1:0] $end
$upscope $end
$scope module hazard_unit $end
$var wire 1 n ControlMux $end
$var wire 1 & ID_EX_MemRead $end
$var wire 5 V% ID_EX_rd [4:0] $end
$var wire 1 i IF_ID_Write $end
$var wire 5 W% IF_ID_rs1 [4:0] $end
$var wire 5 X% IF_ID_rs2 [4:0] $end
$var wire 1 V PCWrite $end
$var wire 1 Y% load_use_hazard $end
$upscope $end
$scope module id_ex_reg $end
$var wire 2 Z% ALUOp_in [1:0] $end
$var wire 1 s ALUSrc_in $end
$var wire 1 p Branch_in $end
$var wire 1 f Jump_in $end
$var wire 1 b MemRead_in $end
$var wire 1 ^ MemToReg_in $end
$var wire 1 Y MemWrite_in $end
$var wire 1 S RegWrite_in $end
$var wire 1 I clk $end
$var wire 1 k flush $end
$var wire 4 [% funct_in [3:0] $end
$var wire 5 \% rd_in [4:0] $end
$var wire 1 ! reset $end
$var wire 5 ]% rs1_in [4:0] $end
$var wire 5 ^% rs2_in [4:0] $end
$var wire 32 _% read_data2_in [31:0] $end
$var wire 32 `% read_data1_in [31:0] $end
$var wire 32 a% pc_in [31:0] $end
$var wire 32 b% immediate_in [31:0] $end
$var reg 2 c% ALUOp_out [1:0] $end
$var reg 1 u ALUSrc_out $end
$var reg 1 r Branch_out $end
$var reg 1 h Jump_out $end
$var reg 1 d MemRead_out $end
$var reg 1 ` MemToReg_out $end
$var reg 1 [ MemWrite_out $end
$var reg 1 U RegWrite_out $end
$var reg 4 d% funct_out [3:0] $end
$var reg 32 e% immediate_out [31:0] $end
$var reg 32 f% pc_out [31:0] $end
$var reg 5 g% rd_out [4:0] $end
$var reg 32 h% read_data1_out [31:0] $end
$var reg 32 i% read_data2_out [31:0] $end
$var reg 5 j% rs1_out [4:0] $end
$var reg 5 k% rs2_out [4:0] $end
$upscope $end
$scope module if_id_reg $end
$var wire 1 I clk $end
$var wire 1 j flush $end
$var wire 1 ! reset $end
$var wire 1 l% stall $end
$var wire 32 m% pc_in [31:0] $end
$var wire 32 n% instruction_in [31:0] $end
$var reg 32 o% instruction_out [31:0] $end
$var reg 32 p% pc_out [31:0] $end
$upscope $end
$scope module imm_gen $end
$var wire 32 q% instruction [31:0] $end
$var wire 7 r% opcode [6:0] $end
$var wire 32 s% immS [31:0] $end
$var wire 32 t% immJ [31:0] $end
$var wire 32 u% immI [31:0] $end
$var wire 32 v% immB [31:0] $end
$var reg 32 w% immediate [31:0] $end
$upscope $end
$scope module inst_mem $end
$var wire 32 x% instruction [31:0] $end
$var wire 32 y% PC [31:0] $end
$upscope $end
$scope module mem_wb_reg $end
$var wire 1 ] MemToReg_in $end
$var wire 1 R RegWrite_in $end
$var wire 32 z% alu_result_in [31:0] $end
$var wire 1 I clk $end
$var wire 5 {% rd_in [4:0] $end
$var wire 32 |% read_data_in [31:0] $end
$var wire 1 ! reset $end
$var reg 1 \ MemToReg_out $end
$var reg 1 Q RegWrite_out $end
$var reg 32 }% alu_result_out [31:0] $end
$var reg 5 ~% rd_out [4:0] $end
$var reg 32 !& read_data_out [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 32 "& B [31:0] $end
$var wire 32 #& result [31:0] $end
$var wire 1 $& Cout $end
$var wire 32 %& A [31:0] $end
$upscope $end
$scope module pc_src_mux $end
$var wire 32 && A [31:0] $end
$var wire 32 '& B [31:0] $end
$var wire 1 W select $end
$var wire 32 (& result [31:0] $end
$upscope $end
$scope module program_counter $end
$var wire 1 I clk $end
$var wire 32 )& datain [31:0] $end
$var wire 1 V enable $end
$var wire 1 ! reset $end
$var reg 32 *& dataout [31:0] $end
$upscope $end
$scope module reg_file $end
$var wire 1 I clk $end
$var wire 5 +& readRegister1 [4:0] $end
$var wire 5 ,& readRegister2 [4:0] $end
$var wire 1 Q regWrite $end
$var wire 5 -& writeRegister [4:0] $end
$var wire 32 .& writeData [31:0] $end
$var reg 32 /& readData1 [31:0] $end
$var reg 32 0& readData2 [31:0] $end
$var reg 32 1& register0 [31:0] $end
$var reg 32 2& register1 [31:0] $end
$var reg 32 3& register10 [31:0] $end
$var reg 32 4& register11 [31:0] $end
$var reg 32 5& register12 [31:0] $end
$var reg 32 6& register13 [31:0] $end
$var reg 32 7& register14 [31:0] $end
$var reg 32 8& register15 [31:0] $end
$var reg 32 9& register16 [31:0] $end
$var reg 32 :& register17 [31:0] $end
$var reg 32 ;& register18 [31:0] $end
$var reg 32 <& register19 [31:0] $end
$var reg 32 =& register2 [31:0] $end
$var reg 32 >& register20 [31:0] $end
$var reg 32 ?& register21 [31:0] $end
$var reg 32 @& register22 [31:0] $end
$var reg 32 A& register23 [31:0] $end
$var reg 32 B& register24 [31:0] $end
$var reg 32 C& register25 [31:0] $end
$var reg 32 D& register26 [31:0] $end
$var reg 32 E& register27 [31:0] $end
$var reg 32 F& register28 [31:0] $end
$var reg 32 G& register29 [31:0] $end
$var reg 32 H& register3 [31:0] $end
$var reg 32 I& register30 [31:0] $end
$var reg 32 J& register31 [31:0] $end
$var reg 32 K& register4 [31:0] $end
$var reg 32 L& register5 [31:0] $end
$var reg 32 M& register6 [31:0] $end
$var reg 32 N& register7 [31:0] $end
$var reg 32 O& register8 [31:0] $end
$var reg 32 P& register9 [31:0] $end
$upscope $end
$scope module wb_mux $end
$var wire 32 Q& A [31:0] $end
$var wire 32 R& B [31:0] $end
$var wire 1 \ select $end
$var wire 32 S& result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11111 %%
b11110 $%
b11101 #%
b11100 "%
b11011 !%
b11010 ~$
b11001 }$
b11000 |$
b10111 {$
b10110 z$
b10101 y$
b10100 x$
b10011 w$
b10010 v$
b10001 u$
b10000 t$
b1111 s$
b1110 r$
b1101 q$
b1100 p$
b1011 o$
b1010 n$
b1001 m$
b1000 l$
b111 k$
b110 j$
b101 i$
b100 h$
b11 g$
b10 f$
b1 e$
b0 d$
b11111 `$
b11110 _$
b11101 ^$
b11100 ]$
b11011 \$
b11010 [$
b11001 Z$
b11000 Y$
b10111 X$
b10110 W$
b10101 V$
b10100 U$
b10011 T$
b10010 S$
b10001 R$
b10000 Q$
b1111 P$
b1110 O$
b1101 N$
b1100 M$
b1011 L$
b1010 K$
b1001 J$
b1000 I$
b111 H$
b110 G$
b101 F$
b100 E$
b11 D$
b10 C$
b1 B$
b0 A$
b11111 9$
b11110 3$
b11101 -$
b11100 '$
b11011 !$
b11010 y#
b11001 s#
b11000 m#
b10111 g#
b10110 a#
b10101 [#
b10100 U#
b10011 O#
b10010 I#
b10001 C#
b10000 =#
b1111 7#
b1110 1#
b1101 +#
b1100 %#
b1011 }"
b1010 w"
b1001 q"
b1000 k"
b111 e"
b110 _"
b101 Y"
b100 S"
b11 M"
b10 G"
b1 A"
b0 ;"
$end
#0
$dumpvars
bx S&
bx R&
bx Q&
b0 P&
b0 O&
b0 N&
b0 M&
b0 L&
b0 K&
b0 J&
b0 I&
b0 H&
b0 G&
b0 F&
b0 E&
b0 D&
b0 C&
b0 B&
b0 A&
b0 @&
b0 ?&
b0 >&
b0 =&
b0 <&
b0 ;&
b0 :&
b0 9&
b0 8&
b0 7&
b0 6&
b0 5&
b0 4&
b0 3&
b0 2&
b0 1&
bx 0&
bx /&
bx .&
bx -&
bx ,&
bx +&
b0 *&
bx )&
bx (&
b100 '&
bx &&
b0 %&
0$&
b100 #&
b100 "&
bx !&
bx ~%
bx }%
b0 |%
bx {%
bx z%
b0 y%
b1010000011 x%
b0 w%
bx0 v%
bx u%
bx0 t%
bx s%
bx r%
bx q%
bx p%
bx o%
b1010000011 n%
b0 m%
xl%
bx k%
bx j%
bx i%
bx h%
bx g%
bx f%
bx e%
bx d%
bx c%
b0 b%
bx a%
bx `%
bx _%
bx ^%
bx ]%
bx \%
bx [%
bx Z%
xY%
bx X%
bx W%
bx V%
bx U%
bx T%
bx S%
bx R%
bx Q%
bx P%
bx O%
bx N%
bx M%
bx L%
bx K%
bx J%
bx I%
bx H%
bx G%
bx F%
bx E%
bx D%
bx C%
bx B%
bx A%
bx @%
bx ?%
bx >%
b10000000 =%
b0 <%
bx ;%
bx :%
bx 9%
x8%
x7%
x6%
x5%
x4%
x3%
bx 2%
x1%
bx 0%
bx /%
x.%
bx -%
x,%
bx +%
bx *%
bx )%
bx (%
bx '%
bx &%
bx c$
bx b$
bx a$
bx @$
bx ?$
bx >$
x=$
bx <$
bx ;$
bx :$
x8$
x7$
x6$
x5$
x4$
x2$
x1$
x0$
x/$
x.$
x,$
x+$
x*$
x)$
x($
x&$
x%$
x$$
x#$
x"$
x~#
x}#
x|#
x{#
xz#
xx#
xw#
xv#
xu#
xt#
xr#
xq#
xp#
xo#
xn#
xl#
xk#
xj#
xi#
xh#
xf#
xe#
xd#
xc#
xb#
x`#
x_#
x^#
x]#
x\#
xZ#
xY#
xX#
xW#
xV#
xT#
xS#
xR#
xQ#
xP#
xN#
xM#
xL#
xK#
xJ#
xH#
xG#
xF#
xE#
xD#
xB#
xA#
x@#
x?#
x>#
x<#
x;#
x:#
x9#
x8#
x6#
x5#
x4#
x3#
x2#
x0#
x/#
x.#
x-#
x,#
x*#
x)#
x(#
x'#
x&#
x$#
x##
x"#
x!#
x~"
x|"
x{"
xz"
xy"
xx"
xv"
xu"
xt"
xs"
xr"
xp"
xo"
xn"
xm"
xl"
xj"
xi"
xh"
xg"
xf"
xd"
xc"
xb"
xa"
x`"
x^"
x]"
x\"
x["
xZ"
xX"
xW"
xV"
xU"
xT"
xR"
xQ"
xP"
xO"
xN"
xL"
xK"
xJ"
xI"
xH"
xF"
xE"
xD"
xC"
xB"
x@"
x?"
x>"
x="
x<"
x:"
x9"
x8"
x7"
x6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
b0xxx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
x'"
bx &"
x%"
x$"
x#"
x""
b0xxx !"
x~
x}
x|
x{
xz
xy
bx x
bx w
bx v
xu
xt
xs
xr
xq
xp
xo
xn
bx m
bx l
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
b0xxx P
bx O
bx N
bx M
bx L
bx K
bx J
0I
bx H
bx G
bx F
bx E
bx D
b0 C
bx B
b1010000011 A
b0 @
bx ?
bx >
bx =
b100 <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
b0 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
x+
x*
bx )
bx (
bx '
x&
bx %
x$
bx #
b0 "
1!
$end
#200
b10000000 #
0!
#500
b0 D
b0 ,"
b0 /%
b0 e%
b0 2
b0 !&
b0 Q&
b1 "
1I
#1000
0I
#1500
b10 "
1I
#2000
0I
#2500
b11 "
1I
#3000
0I
#3500
b100 "
1I
#4000
0I
#4500
b101 "
1I
#5000
0I
#5500
b110 "
1I
#6000
0I
#6500
b111 "
1I
#7000
0I
#7500
b1000 "
1I
#8000
0I
#8500
b1001 "
1I
#9000
0I
#9500
b1010 "
1I
#10000
0I
#10500
b1011 "
1I
#11000
0I
#11500
b1100 "
1I
#12000
0I
#12500
b1101 "
1I
#13000
0I
#13500
b1110 "
1I
#14000
0I
#14500
b1111 "
1I
#15000
0I
#15500
b10000 "
1I
#16000
0I
#16500
b10001 "
1I
#17000
0I
#17500
b10010 "
1I
#18000
0I
#18500
b10011 "
1I
#19000
0I
#19500
b1 #
b10100 "
1I
