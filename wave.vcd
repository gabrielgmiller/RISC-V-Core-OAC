$date
	Sun Jul 27 18:13:26 2025
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module testbench $end
$var reg 1 ! reset $end
$var integer 32 " i [31:0] $end
$scope module UUT $end
$var wire 1 # Branch $end
$var wire 1 $ andBranch $end
$var wire 1 ! reset $end
$var wire 1 % zero $end
$var wire 32 & resAdderB [31:0] $end
$var wire 32 ' resAdderA [31:0] $end
$var wire 32 ( nextPCPosition [31:0] $end
$var wire 32 ) ndInputALU [31:0] $end
$var wire 32 * instructionCurrent [31:0] $end
$var wire 32 + instructionAddress [31:0] $end
$var wire 32 , imm [31:0] $end
$var wire 32 - dataToWrite [31:0] $end
$var wire 32 . dataReadRegister2 [31:0] $end
$var wire 32 / dataReadRegister1 [31:0] $end
$var wire 32 0 dataReadFromMemory [31:0] $end
$var wire 1 1 clk $end
$var wire 1 2 RegWrite $end
$var wire 1 3 RegDst $end
$var wire 1 4 MemWrite $end
$var wire 1 5 MemToReg $end
$var wire 1 6 MemRead $end
$var wire 1 7 ALUSrc $end
$var wire 32 8 ALUResult [31:0] $end
$var wire 1 9 ALUOp1 $end
$var wire 1 : ALUOp0 $end
$var wire 4 ; ALUOp [3:0] $end
$scope module adderA $end
$var wire 32 < result [31:0] $end
$var wire 1 = Cout $end
$var wire 32 > B [31:0] $end
$var wire 32 ? A [31:0] $end
$upscope $end
$scope module adderB $end
$var wire 32 @ B [31:0] $end
$var wire 32 A result [31:0] $end
$var wire 1 B Cout $end
$var wire 32 C A [31:0] $end
$upscope $end
$scope module alu $end
$var wire 1 % zero $end
$var wire 32 D result [31:0] $end
$var wire 32 E resSub [31:0] $end
$var wire 32 F resSrl [31:0] $end
$var wire 32 G resOr [31:0] $end
$var wire 32 H resAnd [31:0] $end
$var wire 32 I resAdd [31:0] $end
$var wire 32 J B [31:0] $end
$var wire 4 K ALUOp [3:0] $end
$var wire 32 L A [31:0] $end
$scope begin MUX_BIT[0] $end
$var wire 1 M sel_add $end
$var wire 1 N sel_and $end
$var wire 1 O sel_or $end
$var wire 1 P sel_srl $end
$var wire 1 Q sel_sub $end
$var parameter 2 R i $end
$upscope $end
$scope begin MUX_BIT[1] $end
$var wire 1 S sel_add $end
$var wire 1 T sel_and $end
$var wire 1 U sel_or $end
$var wire 1 V sel_srl $end
$var wire 1 W sel_sub $end
$var parameter 2 X i $end
$upscope $end
$scope begin MUX_BIT[2] $end
$var wire 1 Y sel_add $end
$var wire 1 Z sel_and $end
$var wire 1 [ sel_or $end
$var wire 1 \ sel_srl $end
$var wire 1 ] sel_sub $end
$var parameter 3 ^ i $end
$upscope $end
$scope begin MUX_BIT[3] $end
$var wire 1 _ sel_add $end
$var wire 1 ` sel_and $end
$var wire 1 a sel_or $end
$var wire 1 b sel_srl $end
$var wire 1 c sel_sub $end
$var parameter 3 d i $end
$upscope $end
$scope begin MUX_BIT[4] $end
$var wire 1 e sel_add $end
$var wire 1 f sel_and $end
$var wire 1 g sel_or $end
$var wire 1 h sel_srl $end
$var wire 1 i sel_sub $end
$var parameter 4 j i $end
$upscope $end
$scope begin MUX_BIT[5] $end
$var wire 1 k sel_add $end
$var wire 1 l sel_and $end
$var wire 1 m sel_or $end
$var wire 1 n sel_srl $end
$var wire 1 o sel_sub $end
$var parameter 4 p i $end
$upscope $end
$scope begin MUX_BIT[6] $end
$var wire 1 q sel_add $end
$var wire 1 r sel_and $end
$var wire 1 s sel_or $end
$var wire 1 t sel_srl $end
$var wire 1 u sel_sub $end
$var parameter 4 v i $end
$upscope $end
$scope begin MUX_BIT[7] $end
$var wire 1 w sel_add $end
$var wire 1 x sel_and $end
$var wire 1 y sel_or $end
$var wire 1 z sel_srl $end
$var wire 1 { sel_sub $end
$var parameter 4 | i $end
$upscope $end
$scope begin MUX_BIT[8] $end
$var wire 1 } sel_add $end
$var wire 1 ~ sel_and $end
$var wire 1 !" sel_or $end
$var wire 1 "" sel_srl $end
$var wire 1 #" sel_sub $end
$var parameter 5 $" i $end
$upscope $end
$scope begin MUX_BIT[9] $end
$var wire 1 %" sel_add $end
$var wire 1 &" sel_and $end
$var wire 1 '" sel_or $end
$var wire 1 (" sel_srl $end
$var wire 1 )" sel_sub $end
$var parameter 5 *" i $end
$upscope $end
$scope begin MUX_BIT[10] $end
$var wire 1 +" sel_add $end
$var wire 1 ," sel_and $end
$var wire 1 -" sel_or $end
$var wire 1 ." sel_srl $end
$var wire 1 /" sel_sub $end
$var parameter 5 0" i $end
$upscope $end
$scope begin MUX_BIT[11] $end
$var wire 1 1" sel_add $end
$var wire 1 2" sel_and $end
$var wire 1 3" sel_or $end
$var wire 1 4" sel_srl $end
$var wire 1 5" sel_sub $end
$var parameter 5 6" i $end
$upscope $end
$scope begin MUX_BIT[12] $end
$var wire 1 7" sel_add $end
$var wire 1 8" sel_and $end
$var wire 1 9" sel_or $end
$var wire 1 :" sel_srl $end
$var wire 1 ;" sel_sub $end
$var parameter 5 <" i $end
$upscope $end
$scope begin MUX_BIT[13] $end
$var wire 1 =" sel_add $end
$var wire 1 >" sel_and $end
$var wire 1 ?" sel_or $end
$var wire 1 @" sel_srl $end
$var wire 1 A" sel_sub $end
$var parameter 5 B" i $end
$upscope $end
$scope begin MUX_BIT[14] $end
$var wire 1 C" sel_add $end
$var wire 1 D" sel_and $end
$var wire 1 E" sel_or $end
$var wire 1 F" sel_srl $end
$var wire 1 G" sel_sub $end
$var parameter 5 H" i $end
$upscope $end
$scope begin MUX_BIT[15] $end
$var wire 1 I" sel_add $end
$var wire 1 J" sel_and $end
$var wire 1 K" sel_or $end
$var wire 1 L" sel_srl $end
$var wire 1 M" sel_sub $end
$var parameter 5 N" i $end
$upscope $end
$scope begin MUX_BIT[16] $end
$var wire 1 O" sel_add $end
$var wire 1 P" sel_and $end
$var wire 1 Q" sel_or $end
$var wire 1 R" sel_srl $end
$var wire 1 S" sel_sub $end
$var parameter 6 T" i $end
$upscope $end
$scope begin MUX_BIT[17] $end
$var wire 1 U" sel_add $end
$var wire 1 V" sel_and $end
$var wire 1 W" sel_or $end
$var wire 1 X" sel_srl $end
$var wire 1 Y" sel_sub $end
$var parameter 6 Z" i $end
$upscope $end
$scope begin MUX_BIT[18] $end
$var wire 1 [" sel_add $end
$var wire 1 \" sel_and $end
$var wire 1 ]" sel_or $end
$var wire 1 ^" sel_srl $end
$var wire 1 _" sel_sub $end
$var parameter 6 `" i $end
$upscope $end
$scope begin MUX_BIT[19] $end
$var wire 1 a" sel_add $end
$var wire 1 b" sel_and $end
$var wire 1 c" sel_or $end
$var wire 1 d" sel_srl $end
$var wire 1 e" sel_sub $end
$var parameter 6 f" i $end
$upscope $end
$scope begin MUX_BIT[20] $end
$var wire 1 g" sel_add $end
$var wire 1 h" sel_and $end
$var wire 1 i" sel_or $end
$var wire 1 j" sel_srl $end
$var wire 1 k" sel_sub $end
$var parameter 6 l" i $end
$upscope $end
$scope begin MUX_BIT[21] $end
$var wire 1 m" sel_add $end
$var wire 1 n" sel_and $end
$var wire 1 o" sel_or $end
$var wire 1 p" sel_srl $end
$var wire 1 q" sel_sub $end
$var parameter 6 r" i $end
$upscope $end
$scope begin MUX_BIT[22] $end
$var wire 1 s" sel_add $end
$var wire 1 t" sel_and $end
$var wire 1 u" sel_or $end
$var wire 1 v" sel_srl $end
$var wire 1 w" sel_sub $end
$var parameter 6 x" i $end
$upscope $end
$scope begin MUX_BIT[23] $end
$var wire 1 y" sel_add $end
$var wire 1 z" sel_and $end
$var wire 1 {" sel_or $end
$var wire 1 |" sel_srl $end
$var wire 1 }" sel_sub $end
$var parameter 6 ~" i $end
$upscope $end
$scope begin MUX_BIT[24] $end
$var wire 1 !# sel_add $end
$var wire 1 "# sel_and $end
$var wire 1 ## sel_or $end
$var wire 1 $# sel_srl $end
$var wire 1 %# sel_sub $end
$var parameter 6 &# i $end
$upscope $end
$scope begin MUX_BIT[25] $end
$var wire 1 '# sel_add $end
$var wire 1 (# sel_and $end
$var wire 1 )# sel_or $end
$var wire 1 *# sel_srl $end
$var wire 1 +# sel_sub $end
$var parameter 6 ,# i $end
$upscope $end
$scope begin MUX_BIT[26] $end
$var wire 1 -# sel_add $end
$var wire 1 .# sel_and $end
$var wire 1 /# sel_or $end
$var wire 1 0# sel_srl $end
$var wire 1 1# sel_sub $end
$var parameter 6 2# i $end
$upscope $end
$scope begin MUX_BIT[27] $end
$var wire 1 3# sel_add $end
$var wire 1 4# sel_and $end
$var wire 1 5# sel_or $end
$var wire 1 6# sel_srl $end
$var wire 1 7# sel_sub $end
$var parameter 6 8# i $end
$upscope $end
$scope begin MUX_BIT[28] $end
$var wire 1 9# sel_add $end
$var wire 1 :# sel_and $end
$var wire 1 ;# sel_or $end
$var wire 1 <# sel_srl $end
$var wire 1 =# sel_sub $end
$var parameter 6 ># i $end
$upscope $end
$scope begin MUX_BIT[29] $end
$var wire 1 ?# sel_add $end
$var wire 1 @# sel_and $end
$var wire 1 A# sel_or $end
$var wire 1 B# sel_srl $end
$var wire 1 C# sel_sub $end
$var parameter 6 D# i $end
$upscope $end
$scope begin MUX_BIT[30] $end
$var wire 1 E# sel_add $end
$var wire 1 F# sel_and $end
$var wire 1 G# sel_or $end
$var wire 1 H# sel_srl $end
$var wire 1 I# sel_sub $end
$var parameter 6 J# i $end
$upscope $end
$scope begin MUX_BIT[31] $end
$var wire 1 K# sel_add $end
$var wire 1 L# sel_and $end
$var wire 1 M# sel_or $end
$var wire 1 N# sel_srl $end
$var wire 1 O# sel_sub $end
$var parameter 6 P# i $end
$upscope $end
$scope module adder $end
$var wire 32 Q# result [31:0] $end
$var wire 1 R# Cout $end
$var wire 32 S# B [31:0] $end
$var wire 32 T# A [31:0] $end
$upscope $end
$scope module andmod $end
$var wire 32 U# result [31:0] $end
$var wire 32 V# B [31:0] $end
$var wire 32 W# A [31:0] $end
$scope begin genblk1[0] $end
$var parameter 2 X# i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 Y# i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 Z# i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 [# i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 \# i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 ]# i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 ^# i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 _# i $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 `# i $end
$upscope $end
$scope begin genblk1[9] $end
$var parameter 5 a# i $end
$upscope $end
$scope begin genblk1[10] $end
$var parameter 5 b# i $end
$upscope $end
$scope begin genblk1[11] $end
$var parameter 5 c# i $end
$upscope $end
$scope begin genblk1[12] $end
$var parameter 5 d# i $end
$upscope $end
$scope begin genblk1[13] $end
$var parameter 5 e# i $end
$upscope $end
$scope begin genblk1[14] $end
$var parameter 5 f# i $end
$upscope $end
$scope begin genblk1[15] $end
$var parameter 5 g# i $end
$upscope $end
$scope begin genblk1[16] $end
$var parameter 6 h# i $end
$upscope $end
$scope begin genblk1[17] $end
$var parameter 6 i# i $end
$upscope $end
$scope begin genblk1[18] $end
$var parameter 6 j# i $end
$upscope $end
$scope begin genblk1[19] $end
$var parameter 6 k# i $end
$upscope $end
$scope begin genblk1[20] $end
$var parameter 6 l# i $end
$upscope $end
$scope begin genblk1[21] $end
$var parameter 6 m# i $end
$upscope $end
$scope begin genblk1[22] $end
$var parameter 6 n# i $end
$upscope $end
$scope begin genblk1[23] $end
$var parameter 6 o# i $end
$upscope $end
$scope begin genblk1[24] $end
$var parameter 6 p# i $end
$upscope $end
$scope begin genblk1[25] $end
$var parameter 6 q# i $end
$upscope $end
$scope begin genblk1[26] $end
$var parameter 6 r# i $end
$upscope $end
$scope begin genblk1[27] $end
$var parameter 6 s# i $end
$upscope $end
$scope begin genblk1[28] $end
$var parameter 6 t# i $end
$upscope $end
$scope begin genblk1[29] $end
$var parameter 6 u# i $end
$upscope $end
$scope begin genblk1[30] $end
$var parameter 6 v# i $end
$upscope $end
$scope begin genblk1[31] $end
$var parameter 6 w# i $end
$upscope $end
$upscope $end
$scope module ormod $end
$var wire 32 x# result [31:0] $end
$var wire 32 y# B [31:0] $end
$var wire 32 z# A [31:0] $end
$scope begin genblk1[0] $end
$var parameter 2 {# i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 |# i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 }# i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 ~# i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 !$ i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 "$ i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 #$ i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 $$ i $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 %$ i $end
$upscope $end
$scope begin genblk1[9] $end
$var parameter 5 &$ i $end
$upscope $end
$scope begin genblk1[10] $end
$var parameter 5 '$ i $end
$upscope $end
$scope begin genblk1[11] $end
$var parameter 5 ($ i $end
$upscope $end
$scope begin genblk1[12] $end
$var parameter 5 )$ i $end
$upscope $end
$scope begin genblk1[13] $end
$var parameter 5 *$ i $end
$upscope $end
$scope begin genblk1[14] $end
$var parameter 5 +$ i $end
$upscope $end
$scope begin genblk1[15] $end
$var parameter 5 ,$ i $end
$upscope $end
$scope begin genblk1[16] $end
$var parameter 6 -$ i $end
$upscope $end
$scope begin genblk1[17] $end
$var parameter 6 .$ i $end
$upscope $end
$scope begin genblk1[18] $end
$var parameter 6 /$ i $end
$upscope $end
$scope begin genblk1[19] $end
$var parameter 6 0$ i $end
$upscope $end
$scope begin genblk1[20] $end
$var parameter 6 1$ i $end
$upscope $end
$scope begin genblk1[21] $end
$var parameter 6 2$ i $end
$upscope $end
$scope begin genblk1[22] $end
$var parameter 6 3$ i $end
$upscope $end
$scope begin genblk1[23] $end
$var parameter 6 4$ i $end
$upscope $end
$scope begin genblk1[24] $end
$var parameter 6 5$ i $end
$upscope $end
$scope begin genblk1[25] $end
$var parameter 6 6$ i $end
$upscope $end
$scope begin genblk1[26] $end
$var parameter 6 7$ i $end
$upscope $end
$scope begin genblk1[27] $end
$var parameter 6 8$ i $end
$upscope $end
$scope begin genblk1[28] $end
$var parameter 6 9$ i $end
$upscope $end
$scope begin genblk1[29] $end
$var parameter 6 :$ i $end
$upscope $end
$scope begin genblk1[30] $end
$var parameter 6 ;$ i $end
$upscope $end
$scope begin genblk1[31] $end
$var parameter 6 <$ i $end
$upscope $end
$upscope $end
$scope module srlmod $end
$var wire 32 =$ result [31:0] $end
$var wire 32 >$ B [31:0] $end
$var wire 32 ?$ A [31:0] $end
$upscope $end
$scope module subtract $end
$var wire 32 @$ result [31:0] $end
$var wire 1 A$ Cout $end
$var wire 32 B$ B [31:0] $end
$var wire 32 C$ A [31:0] $end
$upscope $end
$upscope $end
$scope module aluctrl $end
$var wire 4 D$ funct [3:0] $end
$var wire 1 E$ isB $end
$var wire 1 F$ isI $end
$var wire 1 G$ isR $end
$var wire 1 H$ sel_add $end
$var wire 1 I$ sel_and $end
$var wire 1 J$ sel_or $end
$var wire 1 K$ sel_ori $end
$var wire 1 L$ sel_srl $end
$var wire 1 M$ sel_sub $end
$var wire 4 N$ operation [3:0] $end
$var wire 1 O$ f7_5 $end
$var wire 3 P$ f3 [2:0] $end
$var wire 1 9 ALUOp1 $end
$var wire 1 : ALUOp0 $end
$upscope $end
$scope module clkgen $end
$var reg 1 1 clk $end
$upscope $end
$scope module control $end
$var wire 1 : ALUOp0 $end
$var wire 1 9 ALUOp1 $end
$var wire 1 7 ALUSrc $end
$var wire 1 # Branch $end
$var wire 1 6 MemRead $end
$var wire 1 5 MemToReg $end
$var wire 1 4 MemWrite $end
$var wire 7 Q$ Op [6:0] $end
$var wire 1 3 RegDst $end
$var wire 1 2 RegWrite $end
$var wire 1 R$ E $end
$var wire 1 S$ D $end
$var wire 1 T$ C $end
$var wire 1 U$ B $end
$var wire 1 V$ A $end
$upscope $end
$scope module datamem $end
$var wire 1 1 clk $end
$var wire 32 W$ endereco [31:0] $end
$var wire 1 6 mem_read $end
$var wire 1 4 mem_write $end
$var wire 32 X$ write_data [31:0] $end
$var reg 32 Y$ read_data [31:0] $end
$var integer 32 Z$ i [31:0] $end
$upscope $end
$scope module immgen $end
$var wire 7 [$ opcode [6:0] $end
$var wire 32 \$ instruction [31:0] $end
$var wire 32 ]$ immS [31:0] $end
$var wire 32 ^$ immI [31:0] $end
$var wire 32 _$ immB [31:0] $end
$var reg 32 `$ immediate [31:0] $end
$upscope $end
$scope module instmemo $end
$var wire 32 a$ instruction [31:0] $end
$var wire 32 b$ PC [31:0] $end
$upscope $end
$scope module muxA $end
$var wire 32 c$ A [31:0] $end
$var wire 32 d$ B [31:0] $end
$var wire 1 $ select $end
$var wire 32 e$ result [31:0] $end
$upscope $end
$scope module muxB $end
$var wire 32 f$ A [31:0] $end
$var wire 32 g$ B [31:0] $end
$var wire 1 5 select $end
$var wire 32 h$ result [31:0] $end
$upscope $end
$scope module muxC $end
$var wire 32 i$ A [31:0] $end
$var wire 1 7 select $end
$var wire 32 j$ result [31:0] $end
$var wire 32 k$ B [31:0] $end
$upscope $end
$scope module programCounter $end
$var wire 1 1 clk $end
$var wire 32 l$ datain [31:0] $end
$var wire 1 m$ enable $end
$var wire 1 ! reset $end
$var reg 32 n$ dataout [31:0] $end
$upscope $end
$scope module regs $end
$var wire 1 1 clk $end
$var wire 5 o$ readRegister1 [4:0] $end
$var wire 5 p$ readRegister2 [4:0] $end
$var wire 1 2 regWrite $end
$var wire 32 q$ writeData [31:0] $end
$var wire 5 r$ writeRegister [4:0] $end
$var reg 32 s$ readData1 [31:0] $end
$var reg 32 t$ readData2 [31:0] $end
$var reg 32 u$ register0 [31:0] $end
$var reg 32 v$ register1 [31:0] $end
$var reg 32 w$ register10 [31:0] $end
$var reg 32 x$ register11 [31:0] $end
$var reg 32 y$ register12 [31:0] $end
$var reg 32 z$ register13 [31:0] $end
$var reg 32 {$ register14 [31:0] $end
$var reg 32 |$ register15 [31:0] $end
$var reg 32 }$ register16 [31:0] $end
$var reg 32 ~$ register17 [31:0] $end
$var reg 32 !% register18 [31:0] $end
$var reg 32 "% register19 [31:0] $end
$var reg 32 #% register2 [31:0] $end
$var reg 32 $% register20 [31:0] $end
$var reg 32 %% register21 [31:0] $end
$var reg 32 &% register22 [31:0] $end
$var reg 32 '% register23 [31:0] $end
$var reg 32 (% register24 [31:0] $end
$var reg 32 )% register25 [31:0] $end
$var reg 32 *% register26 [31:0] $end
$var reg 32 +% register27 [31:0] $end
$var reg 32 ,% register28 [31:0] $end
$var reg 32 -% register29 [31:0] $end
$var reg 32 .% register3 [31:0] $end
$var reg 32 /% register30 [31:0] $end
$var reg 32 0% register31 [31:0] $end
$var reg 32 1% register4 [31:0] $end
$var reg 32 2% register5 [31:0] $end
$var reg 32 3% register6 [31:0] $end
$var reg 32 4% register7 [31:0] $end
$var reg 32 5% register8 [31:0] $end
$var reg 32 6% register9 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11111 <$
b11110 ;$
b11101 :$
b11100 9$
b11011 8$
b11010 7$
b11001 6$
b11000 5$
b10111 4$
b10110 3$
b10101 2$
b10100 1$
b10011 0$
b10010 /$
b10001 .$
b10000 -$
b1111 ,$
b1110 +$
b1101 *$
b1100 )$
b1011 ($
b1010 '$
b1001 &$
b1000 %$
b111 $$
b110 #$
b101 "$
b100 !$
b11 ~#
b10 }#
b1 |#
b0 {#
b11111 w#
b11110 v#
b11101 u#
b11100 t#
b11011 s#
b11010 r#
b11001 q#
b11000 p#
b10111 o#
b10110 n#
b10101 m#
b10100 l#
b10011 k#
b10010 j#
b10001 i#
b10000 h#
b1111 g#
b1110 f#
b1101 e#
b1100 d#
b1011 c#
b1010 b#
b1001 a#
b1000 `#
b111 _#
b110 ^#
b101 ]#
b100 \#
b11 [#
b10 Z#
b1 Y#
b0 X#
b11111 P#
b11110 J#
b11101 D#
b11100 >#
b11011 8#
b11010 2#
b11001 ,#
b11000 &#
b10111 ~"
b10110 x"
b10101 r"
b10100 l"
b10011 f"
b10010 `"
b10001 Z"
b10000 T"
b1111 N"
b1110 H"
b1101 B"
b1100 <"
b1011 6"
b1010 0"
b1001 *"
b1000 $"
b111 |
b110 v
b101 p
b100 j
b11 d
b10 ^
b1 X
b0 R
$end
#0
$dumpvars
b0 6%
b0 5%
b0 4%
b0 3%
b0 2%
b0 1%
b0 0%
b0 /%
b0 .%
b0 -%
b0 ,%
b0 +%
b0 *%
b0 )%
b0 (%
b0 '%
b0 &%
b0 %%
b0 $%
b0 #%
b0 "%
b0 !%
b0 ~$
b0 }$
b0 |$
b0 {$
b0 z$
b0 y$
b0 x$
b0 w$
b0 v$
b0 u$
b0 t$
b0 s$
b1 r$
b0 q$
b111 p$
b0 o$
b0 n$
1m$
b0xx1 l$
b0 k$
b111 j$
b111 i$
b0 h$
b0 g$
b0 f$
b0xx1 e$
b1 d$
b111 c$
b0 b$
b11100000000000010010011 a$
b111 `$
b100000000000 _$
b111 ^$
b1 ]$
b11100000000000010010011 \$
b10011 [$
b10000000 Z$
b0 Y$
b0 X$
b0 W$
0V$
0U$
0T$
0S$
1R$
b10011 Q$
b0 P$
0O$
b0 N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
b0 D$
b0 C$
b111 B$
1A$
b11111111111111111111111111111001 @$
b0 ?$
b111 >$
b0 =$
b0 z#
b111 y#
b111 x#
b0 W#
b111 V#
b0 U#
b0 T#
b111 S#
0R#
b111 Q#
0O#
0N#
0M#
1L#
0K#
0I#
0H#
0G#
1F#
0E#
0C#
0B#
0A#
1@#
0?#
0=#
0<#
0;#
1:#
09#
07#
06#
05#
14#
03#
01#
00#
0/#
1.#
0-#
0+#
0*#
0)#
1(#
0'#
0%#
0$#
0##
1"#
0!#
0}"
0|"
0{"
1z"
0y"
0w"
0v"
0u"
1t"
0s"
0q"
0p"
0o"
1n"
0m"
0k"
0j"
0i"
1h"
0g"
0e"
0d"
0c"
1b"
0a"
0_"
0^"
0]"
1\"
0["
0Y"
0X"
0W"
1V"
0U"
0S"
0R"
0Q"
1P"
0O"
0M"
0L"
0K"
1J"
0I"
0G"
0F"
0E"
1D"
0C"
0A"
0@"
0?"
1>"
0="
0;"
0:"
09"
18"
07"
05"
04"
03"
12"
01"
0/"
0."
0-"
1,"
0+"
0)"
0("
0'"
1&"
0%"
0#"
0""
0!"
1~
0}
0{
0z
0y
1x
0w
0u
0t
0s
1r
0q
0o
0n
0m
1l
0k
0i
0h
0g
1f
0e
0c
0b
0a
1`
0_
0]
0\
0[
1Z
0Y
0W
0V
0U
1T
0S
0Q
0P
0O
1N
0M
b0 L
b0 K
b111 J
b111 I
b0 H
b111 G
b0 F
b11111111111111111111111111111001 E
b0 D
b0 C
0B
b1 A
b1 @
b0 ?
b111 >
0=
b111 <
b0 ;
1:
19
b0 8
17
06
05
04
03
12
01
b0 0
b0 /
b0 .
b0 -
b111 ,
b0 +
b11100000000000010010011 *
b111 )
b0xx1 (
b111 '
b1 &
1%
z$
x#
bx "
1!
$end
#200
0!
#500
xL#
xO#
xF#
xI#
x@#
xC#
x:#
x=#
x4#
x7#
x.#
x1#
x(#
x+#
x"#
x%#
xz"
x}"
xt"
xw"
xn"
xq"
xh"
xk"
xb"
xe"
x\"
x_"
xV"
xY"
xP"
xS"
xJ"
xM"
xD"
xG"
x>"
xA"
x8"
x;"
x2"
x5"
x,"
x/"
x&"
x)"
x~
x#"
xx
x{
xr
xu
xl
xo
xf
xi
x`
xc
xZ
x]
xT
xW
xN
xQ
xK#
xE#
x?#
x9#
x3#
x-#
x'#
x!#
xy"
xs"
xm"
xg"
xa"
x["
xU"
xO"
xI"
xC"
x="
x7"
x1"
x+"
x%"
x}
xw
xq
xk
xe
x_
xY
xS
xM
xM#
xG#
xA#
x;#
x5#
x/#
x)#
x##
x{"
xu"
xo"
xi"
xc"
x]"
xW"
xQ"
xK"
xE"
x?"
x9"
x3"
x-"
x'"
x!"
xy
xs
xm
xg
xa
x[
xU
xO
xL$
xH$
b0xxx ;
b0xxx K
b0xxx N$
xI$
xJ$
xK$
b0 G
b0 x#
xM$
xG$
xF$
b0 E
b0 @$
0A$
b0 I
b0 Q#
xE$
b0 )
b0 J
b0 S#
b0 V#
b0 y#
b0 >$
b0 B$
b0 j$
b0 ,
b0 >
b0 `$
b0 i$
bx P$
xO$
x:
x9
x2
x7
bx (
bx e$
bx l$
bx0 _$
bx ]$
bx ^$
bx [$
bx r$
bx p$
bx o$
bx D$
x3
xV$
x6
x5
xU$
x4
xT$
xS$
xR$
bx Q$
bx &
bx A
bx d$
xB
bx '
bx <
bx c$
x=
bx *
bx \$
bx a$
b0xx1 +
b0xx1 ?
b0xx1 C
b0xx1 b$
b0xx1 n$
11
#1000
01
#1500
bx +
bx ?
bx C
bx b$
bx n$
11
#2000
01
#2500
11
#3000
01
#3500
11
#4000
01
#4500
11
#5000
01
b100000 "
