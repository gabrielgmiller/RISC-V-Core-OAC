$date
	Mon Aug  4 11:02:23 2025
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module debug_testbench $end
$var reg 1 ! reset $end
$scope module UUT $end
$var wire 1 " andBranch $end
$var wire 1 # orJump $end
$var wire 1 ! reset $end
$var wire 1 $ zero $end
$var wire 32 % resAdderB [31:0] $end
$var wire 32 & resAdderA [31:0] $end
$var wire 32 ' nextPCPosition [31:0] $end
$var wire 32 ( ndInputALU [31:0] $end
$var wire 32 ) instructionCurrent [31:0] $end
$var wire 32 * instructionAddress [31:0] $end
$var wire 32 + imm [31:0] $end
$var wire 32 , dataToWrite [31:0] $end
$var wire 32 - dataReadRegister2 [31:0] $end
$var wire 32 . dataReadRegister1 [31:0] $end
$var wire 32 / dataReadFromMemory [31:0] $end
$var wire 1 0 clk $end
$var wire 1 1 RegWrite $end
$var wire 1 2 RegDst $end
$var wire 1 3 MemWrite $end
$var wire 1 4 MemToReg $end
$var wire 1 5 MemRead $end
$var wire 1 6 Jump $end
$var wire 1 7 Branch $end
$var wire 1 8 ALUSrc $end
$var wire 32 9 ALUResult [31:0] $end
$var wire 1 : ALUOp1 $end
$var wire 1 ; ALUOp0 $end
$var wire 4 < ALUOp [3:0] $end
$scope module adderA $end
$var wire 32 = result [31:0] $end
$var wire 1 > Cout $end
$var wire 32 ? B [31:0] $end
$var wire 32 @ A [31:0] $end
$upscope $end
$scope module adderB $end
$var wire 32 A B [31:0] $end
$var wire 32 B result [31:0] $end
$var wire 1 C Cout $end
$var wire 32 D A [31:0] $end
$upscope $end
$scope module alu $end
$var wire 1 $ zero $end
$var wire 32 E result [31:0] $end
$var wire 32 F resSub [31:0] $end
$var wire 32 G resSrl [31:0] $end
$var wire 32 H resOr [31:0] $end
$var wire 32 I resAnd [31:0] $end
$var wire 32 J resAdd [31:0] $end
$var wire 32 K B [31:0] $end
$var wire 4 L ALUOp [3:0] $end
$var wire 32 M A [31:0] $end
$scope begin MUX_BIT[0] $end
$var wire 1 N sel_add $end
$var wire 1 O sel_and $end
$var wire 1 P sel_or $end
$var wire 1 Q sel_srl $end
$var wire 1 R sel_sub $end
$var parameter 2 S i $end
$upscope $end
$scope begin MUX_BIT[1] $end
$var wire 1 T sel_add $end
$var wire 1 U sel_and $end
$var wire 1 V sel_or $end
$var wire 1 W sel_srl $end
$var wire 1 X sel_sub $end
$var parameter 2 Y i $end
$upscope $end
$scope begin MUX_BIT[2] $end
$var wire 1 Z sel_add $end
$var wire 1 [ sel_and $end
$var wire 1 \ sel_or $end
$var wire 1 ] sel_srl $end
$var wire 1 ^ sel_sub $end
$var parameter 3 _ i $end
$upscope $end
$scope begin MUX_BIT[3] $end
$var wire 1 ` sel_add $end
$var wire 1 a sel_and $end
$var wire 1 b sel_or $end
$var wire 1 c sel_srl $end
$var wire 1 d sel_sub $end
$var parameter 3 e i $end
$upscope $end
$scope begin MUX_BIT[4] $end
$var wire 1 f sel_add $end
$var wire 1 g sel_and $end
$var wire 1 h sel_or $end
$var wire 1 i sel_srl $end
$var wire 1 j sel_sub $end
$var parameter 4 k i $end
$upscope $end
$scope begin MUX_BIT[5] $end
$var wire 1 l sel_add $end
$var wire 1 m sel_and $end
$var wire 1 n sel_or $end
$var wire 1 o sel_srl $end
$var wire 1 p sel_sub $end
$var parameter 4 q i $end
$upscope $end
$scope begin MUX_BIT[6] $end
$var wire 1 r sel_add $end
$var wire 1 s sel_and $end
$var wire 1 t sel_or $end
$var wire 1 u sel_srl $end
$var wire 1 v sel_sub $end
$var parameter 4 w i $end
$upscope $end
$scope begin MUX_BIT[7] $end
$var wire 1 x sel_add $end
$var wire 1 y sel_and $end
$var wire 1 z sel_or $end
$var wire 1 { sel_srl $end
$var wire 1 | sel_sub $end
$var parameter 4 } i $end
$upscope $end
$scope begin MUX_BIT[8] $end
$var wire 1 ~ sel_add $end
$var wire 1 !" sel_and $end
$var wire 1 "" sel_or $end
$var wire 1 #" sel_srl $end
$var wire 1 $" sel_sub $end
$var parameter 5 %" i $end
$upscope $end
$scope begin MUX_BIT[9] $end
$var wire 1 &" sel_add $end
$var wire 1 '" sel_and $end
$var wire 1 (" sel_or $end
$var wire 1 )" sel_srl $end
$var wire 1 *" sel_sub $end
$var parameter 5 +" i $end
$upscope $end
$scope begin MUX_BIT[10] $end
$var wire 1 ," sel_add $end
$var wire 1 -" sel_and $end
$var wire 1 ." sel_or $end
$var wire 1 /" sel_srl $end
$var wire 1 0" sel_sub $end
$var parameter 5 1" i $end
$upscope $end
$scope begin MUX_BIT[11] $end
$var wire 1 2" sel_add $end
$var wire 1 3" sel_and $end
$var wire 1 4" sel_or $end
$var wire 1 5" sel_srl $end
$var wire 1 6" sel_sub $end
$var parameter 5 7" i $end
$upscope $end
$scope begin MUX_BIT[12] $end
$var wire 1 8" sel_add $end
$var wire 1 9" sel_and $end
$var wire 1 :" sel_or $end
$var wire 1 ;" sel_srl $end
$var wire 1 <" sel_sub $end
$var parameter 5 =" i $end
$upscope $end
$scope begin MUX_BIT[13] $end
$var wire 1 >" sel_add $end
$var wire 1 ?" sel_and $end
$var wire 1 @" sel_or $end
$var wire 1 A" sel_srl $end
$var wire 1 B" sel_sub $end
$var parameter 5 C" i $end
$upscope $end
$scope begin MUX_BIT[14] $end
$var wire 1 D" sel_add $end
$var wire 1 E" sel_and $end
$var wire 1 F" sel_or $end
$var wire 1 G" sel_srl $end
$var wire 1 H" sel_sub $end
$var parameter 5 I" i $end
$upscope $end
$scope begin MUX_BIT[15] $end
$var wire 1 J" sel_add $end
$var wire 1 K" sel_and $end
$var wire 1 L" sel_or $end
$var wire 1 M" sel_srl $end
$var wire 1 N" sel_sub $end
$var parameter 5 O" i $end
$upscope $end
$scope begin MUX_BIT[16] $end
$var wire 1 P" sel_add $end
$var wire 1 Q" sel_and $end
$var wire 1 R" sel_or $end
$var wire 1 S" sel_srl $end
$var wire 1 T" sel_sub $end
$var parameter 6 U" i $end
$upscope $end
$scope begin MUX_BIT[17] $end
$var wire 1 V" sel_add $end
$var wire 1 W" sel_and $end
$var wire 1 X" sel_or $end
$var wire 1 Y" sel_srl $end
$var wire 1 Z" sel_sub $end
$var parameter 6 [" i $end
$upscope $end
$scope begin MUX_BIT[18] $end
$var wire 1 \" sel_add $end
$var wire 1 ]" sel_and $end
$var wire 1 ^" sel_or $end
$var wire 1 _" sel_srl $end
$var wire 1 `" sel_sub $end
$var parameter 6 a" i $end
$upscope $end
$scope begin MUX_BIT[19] $end
$var wire 1 b" sel_add $end
$var wire 1 c" sel_and $end
$var wire 1 d" sel_or $end
$var wire 1 e" sel_srl $end
$var wire 1 f" sel_sub $end
$var parameter 6 g" i $end
$upscope $end
$scope begin MUX_BIT[20] $end
$var wire 1 h" sel_add $end
$var wire 1 i" sel_and $end
$var wire 1 j" sel_or $end
$var wire 1 k" sel_srl $end
$var wire 1 l" sel_sub $end
$var parameter 6 m" i $end
$upscope $end
$scope begin MUX_BIT[21] $end
$var wire 1 n" sel_add $end
$var wire 1 o" sel_and $end
$var wire 1 p" sel_or $end
$var wire 1 q" sel_srl $end
$var wire 1 r" sel_sub $end
$var parameter 6 s" i $end
$upscope $end
$scope begin MUX_BIT[22] $end
$var wire 1 t" sel_add $end
$var wire 1 u" sel_and $end
$var wire 1 v" sel_or $end
$var wire 1 w" sel_srl $end
$var wire 1 x" sel_sub $end
$var parameter 6 y" i $end
$upscope $end
$scope begin MUX_BIT[23] $end
$var wire 1 z" sel_add $end
$var wire 1 {" sel_and $end
$var wire 1 |" sel_or $end
$var wire 1 }" sel_srl $end
$var wire 1 ~" sel_sub $end
$var parameter 6 !# i $end
$upscope $end
$scope begin MUX_BIT[24] $end
$var wire 1 "# sel_add $end
$var wire 1 ## sel_and $end
$var wire 1 $# sel_or $end
$var wire 1 %# sel_srl $end
$var wire 1 &# sel_sub $end
$var parameter 6 '# i $end
$upscope $end
$scope begin MUX_BIT[25] $end
$var wire 1 (# sel_add $end
$var wire 1 )# sel_and $end
$var wire 1 *# sel_or $end
$var wire 1 +# sel_srl $end
$var wire 1 ,# sel_sub $end
$var parameter 6 -# i $end
$upscope $end
$scope begin MUX_BIT[26] $end
$var wire 1 .# sel_add $end
$var wire 1 /# sel_and $end
$var wire 1 0# sel_or $end
$var wire 1 1# sel_srl $end
$var wire 1 2# sel_sub $end
$var parameter 6 3# i $end
$upscope $end
$scope begin MUX_BIT[27] $end
$var wire 1 4# sel_add $end
$var wire 1 5# sel_and $end
$var wire 1 6# sel_or $end
$var wire 1 7# sel_srl $end
$var wire 1 8# sel_sub $end
$var parameter 6 9# i $end
$upscope $end
$scope begin MUX_BIT[28] $end
$var wire 1 :# sel_add $end
$var wire 1 ;# sel_and $end
$var wire 1 <# sel_or $end
$var wire 1 =# sel_srl $end
$var wire 1 ># sel_sub $end
$var parameter 6 ?# i $end
$upscope $end
$scope begin MUX_BIT[29] $end
$var wire 1 @# sel_add $end
$var wire 1 A# sel_and $end
$var wire 1 B# sel_or $end
$var wire 1 C# sel_srl $end
$var wire 1 D# sel_sub $end
$var parameter 6 E# i $end
$upscope $end
$scope begin MUX_BIT[30] $end
$var wire 1 F# sel_add $end
$var wire 1 G# sel_and $end
$var wire 1 H# sel_or $end
$var wire 1 I# sel_srl $end
$var wire 1 J# sel_sub $end
$var parameter 6 K# i $end
$upscope $end
$scope begin MUX_BIT[31] $end
$var wire 1 L# sel_add $end
$var wire 1 M# sel_and $end
$var wire 1 N# sel_or $end
$var wire 1 O# sel_srl $end
$var wire 1 P# sel_sub $end
$var parameter 6 Q# i $end
$upscope $end
$scope module adder $end
$var wire 32 R# result [31:0] $end
$var wire 1 S# Cout $end
$var wire 32 T# B [31:0] $end
$var wire 32 U# A [31:0] $end
$upscope $end
$scope module andmod $end
$var wire 32 V# result [31:0] $end
$var wire 32 W# B [31:0] $end
$var wire 32 X# A [31:0] $end
$scope begin genblk1[0] $end
$var parameter 2 Y# i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 Z# i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 [# i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 \# i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 ]# i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 ^# i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 _# i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 `# i $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 a# i $end
$upscope $end
$scope begin genblk1[9] $end
$var parameter 5 b# i $end
$upscope $end
$scope begin genblk1[10] $end
$var parameter 5 c# i $end
$upscope $end
$scope begin genblk1[11] $end
$var parameter 5 d# i $end
$upscope $end
$scope begin genblk1[12] $end
$var parameter 5 e# i $end
$upscope $end
$scope begin genblk1[13] $end
$var parameter 5 f# i $end
$upscope $end
$scope begin genblk1[14] $end
$var parameter 5 g# i $end
$upscope $end
$scope begin genblk1[15] $end
$var parameter 5 h# i $end
$upscope $end
$scope begin genblk1[16] $end
$var parameter 6 i# i $end
$upscope $end
$scope begin genblk1[17] $end
$var parameter 6 j# i $end
$upscope $end
$scope begin genblk1[18] $end
$var parameter 6 k# i $end
$upscope $end
$scope begin genblk1[19] $end
$var parameter 6 l# i $end
$upscope $end
$scope begin genblk1[20] $end
$var parameter 6 m# i $end
$upscope $end
$scope begin genblk1[21] $end
$var parameter 6 n# i $end
$upscope $end
$scope begin genblk1[22] $end
$var parameter 6 o# i $end
$upscope $end
$scope begin genblk1[23] $end
$var parameter 6 p# i $end
$upscope $end
$scope begin genblk1[24] $end
$var parameter 6 q# i $end
$upscope $end
$scope begin genblk1[25] $end
$var parameter 6 r# i $end
$upscope $end
$scope begin genblk1[26] $end
$var parameter 6 s# i $end
$upscope $end
$scope begin genblk1[27] $end
$var parameter 6 t# i $end
$upscope $end
$scope begin genblk1[28] $end
$var parameter 6 u# i $end
$upscope $end
$scope begin genblk1[29] $end
$var parameter 6 v# i $end
$upscope $end
$scope begin genblk1[30] $end
$var parameter 6 w# i $end
$upscope $end
$scope begin genblk1[31] $end
$var parameter 6 x# i $end
$upscope $end
$upscope $end
$scope module ormod $end
$var wire 32 y# result [31:0] $end
$var wire 32 z# B [31:0] $end
$var wire 32 {# A [31:0] $end
$scope begin genblk1[0] $end
$var parameter 2 |# i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 }# i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 ~# i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 !$ i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 "$ i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 #$ i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 $$ i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 %$ i $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 &$ i $end
$upscope $end
$scope begin genblk1[9] $end
$var parameter 5 '$ i $end
$upscope $end
$scope begin genblk1[10] $end
$var parameter 5 ($ i $end
$upscope $end
$scope begin genblk1[11] $end
$var parameter 5 )$ i $end
$upscope $end
$scope begin genblk1[12] $end
$var parameter 5 *$ i $end
$upscope $end
$scope begin genblk1[13] $end
$var parameter 5 +$ i $end
$upscope $end
$scope begin genblk1[14] $end
$var parameter 5 ,$ i $end
$upscope $end
$scope begin genblk1[15] $end
$var parameter 5 -$ i $end
$upscope $end
$scope begin genblk1[16] $end
$var parameter 6 .$ i $end
$upscope $end
$scope begin genblk1[17] $end
$var parameter 6 /$ i $end
$upscope $end
$scope begin genblk1[18] $end
$var parameter 6 0$ i $end
$upscope $end
$scope begin genblk1[19] $end
$var parameter 6 1$ i $end
$upscope $end
$scope begin genblk1[20] $end
$var parameter 6 2$ i $end
$upscope $end
$scope begin genblk1[21] $end
$var parameter 6 3$ i $end
$upscope $end
$scope begin genblk1[22] $end
$var parameter 6 4$ i $end
$upscope $end
$scope begin genblk1[23] $end
$var parameter 6 5$ i $end
$upscope $end
$scope begin genblk1[24] $end
$var parameter 6 6$ i $end
$upscope $end
$scope begin genblk1[25] $end
$var parameter 6 7$ i $end
$upscope $end
$scope begin genblk1[26] $end
$var parameter 6 8$ i $end
$upscope $end
$scope begin genblk1[27] $end
$var parameter 6 9$ i $end
$upscope $end
$scope begin genblk1[28] $end
$var parameter 6 :$ i $end
$upscope $end
$scope begin genblk1[29] $end
$var parameter 6 ;$ i $end
$upscope $end
$scope begin genblk1[30] $end
$var parameter 6 <$ i $end
$upscope $end
$scope begin genblk1[31] $end
$var parameter 6 =$ i $end
$upscope $end
$upscope $end
$scope module srlmod $end
$var wire 32 >$ result [31:0] $end
$var wire 32 ?$ B [31:0] $end
$var wire 32 @$ A [31:0] $end
$upscope $end
$scope module subtract $end
$var wire 32 A$ result [31:0] $end
$var wire 1 B$ Cout $end
$var wire 32 C$ B [31:0] $end
$var wire 32 D$ A [31:0] $end
$upscope $end
$upscope $end
$scope module aluctrl $end
$var wire 4 E$ funct [3:0] $end
$var wire 1 F$ isB $end
$var wire 1 G$ isI $end
$var wire 1 H$ isLS $end
$var wire 1 I$ isR $end
$var wire 1 J$ sel_add $end
$var wire 1 K$ sel_and $end
$var wire 1 L$ sel_or $end
$var wire 1 M$ sel_ori $end
$var wire 1 N$ sel_srl $end
$var wire 1 O$ sel_sub $end
$var wire 4 P$ operation [3:0] $end
$var wire 1 Q$ f7_5 $end
$var wire 3 R$ f3 [2:0] $end
$var wire 1 : ALUOp1 $end
$var wire 1 ; ALUOp0 $end
$upscope $end
$scope module clkgen $end
$var reg 1 0 clk $end
$upscope $end
$scope module control $end
$var wire 1 ; ALUOp0 $end
$var wire 1 : ALUOp1 $end
$var wire 1 8 ALUSrc $end
$var wire 1 7 Branch $end
$var wire 1 6 Jump $end
$var wire 1 5 MemRead $end
$var wire 1 4 MemToReg $end
$var wire 1 3 MemWrite $end
$var wire 7 S$ Op [6:0] $end
$var wire 1 2 RegDst $end
$var wire 1 1 RegWrite $end
$var wire 1 T$ Store $end
$var wire 1 U$ R_type $end
$var wire 1 V$ Load $end
$var wire 1 W$ Jump_type $end
$var wire 1 X$ I_arith $end
$var wire 1 Y$ Branch_type $end
$upscope $end
$scope module datamem $end
$var wire 1 0 clk $end
$var wire 32 Z$ endereco [31:0] $end
$var wire 1 5 mem_read $end
$var wire 1 3 mem_write $end
$var wire 32 [$ write_data [31:0] $end
$var reg 32 \$ read_data [31:0] $end
$var integer 32 ]$ i [31:0] $end
$upscope $end
$scope module immgen $end
$var wire 7 ^$ opcode [6:0] $end
$var wire 32 _$ instruction [31:0] $end
$var wire 32 `$ immS [31:0] $end
$var wire 32 a$ immJ [31:0] $end
$var wire 32 b$ immI [31:0] $end
$var wire 32 c$ immB [31:0] $end
$var reg 32 d$ immediate [31:0] $end
$upscope $end
$scope module instmemo $end
$var wire 32 e$ instruction [31:0] $end
$var wire 32 f$ PC [31:0] $end
$upscope $end
$scope module muxA $end
$var wire 32 g$ A [31:0] $end
$var wire 32 h$ B [31:0] $end
$var wire 1 # select $end
$var wire 32 i$ result [31:0] $end
$upscope $end
$scope module muxB $end
$var wire 32 j$ A [31:0] $end
$var wire 32 k$ B [31:0] $end
$var wire 1 4 select $end
$var wire 32 l$ result [31:0] $end
$upscope $end
$scope module muxC $end
$var wire 32 m$ A [31:0] $end
$var wire 1 8 select $end
$var wire 32 n$ result [31:0] $end
$var wire 32 o$ B [31:0] $end
$upscope $end
$scope module programCounter $end
$var wire 1 0 clk $end
$var wire 32 p$ datain [31:0] $end
$var wire 1 q$ enable $end
$var wire 1 ! reset $end
$var reg 32 r$ dataout [31:0] $end
$upscope $end
$scope module regs $end
$var wire 1 0 clk $end
$var wire 5 s$ readRegister1 [4:0] $end
$var wire 5 t$ readRegister2 [4:0] $end
$var wire 1 1 regWrite $end
$var wire 32 u$ writeData [31:0] $end
$var wire 5 v$ writeRegister [4:0] $end
$var reg 32 w$ readData1 [31:0] $end
$var reg 32 x$ readData2 [31:0] $end
$var reg 32 y$ register0 [31:0] $end
$var reg 32 z$ register1 [31:0] $end
$var reg 32 {$ register10 [31:0] $end
$var reg 32 |$ register11 [31:0] $end
$var reg 32 }$ register12 [31:0] $end
$var reg 32 ~$ register13 [31:0] $end
$var reg 32 !% register14 [31:0] $end
$var reg 32 "% register15 [31:0] $end
$var reg 32 #% register16 [31:0] $end
$var reg 32 $% register17 [31:0] $end
$var reg 32 %% register18 [31:0] $end
$var reg 32 &% register19 [31:0] $end
$var reg 32 '% register2 [31:0] $end
$var reg 32 (% register20 [31:0] $end
$var reg 32 )% register21 [31:0] $end
$var reg 32 *% register22 [31:0] $end
$var reg 32 +% register23 [31:0] $end
$var reg 32 ,% register24 [31:0] $end
$var reg 32 -% register25 [31:0] $end
$var reg 32 .% register26 [31:0] $end
$var reg 32 /% register27 [31:0] $end
$var reg 32 0% register28 [31:0] $end
$var reg 32 1% register29 [31:0] $end
$var reg 32 2% register3 [31:0] $end
$var reg 32 3% register30 [31:0] $end
$var reg 32 4% register31 [31:0] $end
$var reg 32 5% register4 [31:0] $end
$var reg 32 6% register5 [31:0] $end
$var reg 32 7% register6 [31:0] $end
$var reg 32 8% register7 [31:0] $end
$var reg 32 9% register8 [31:0] $end
$var reg 32 :% register9 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11111 =$
b11110 <$
b11101 ;$
b11100 :$
b11011 9$
b11010 8$
b11001 7$
b11000 6$
b10111 5$
b10110 4$
b10101 3$
b10100 2$
b10011 1$
b10010 0$
b10001 /$
b10000 .$
b1111 -$
b1110 ,$
b1101 +$
b1100 *$
b1011 )$
b1010 ($
b1001 '$
b1000 &$
b111 %$
b110 $$
b101 #$
b100 "$
b11 !$
b10 ~#
b1 }#
b0 |#
b11111 x#
b11110 w#
b11101 v#
b11100 u#
b11011 t#
b11010 s#
b11001 r#
b11000 q#
b10111 p#
b10110 o#
b10101 n#
b10100 m#
b10011 l#
b10010 k#
b10001 j#
b10000 i#
b1111 h#
b1110 g#
b1101 f#
b1100 e#
b1011 d#
b1010 c#
b1001 b#
b1000 a#
b111 `#
b110 _#
b101 ^#
b100 ]#
b11 \#
b10 [#
b1 Z#
b0 Y#
b11111 Q#
b11110 K#
b11101 E#
b11100 ?#
b11011 9#
b11010 3#
b11001 -#
b11000 '#
b10111 !#
b10110 y"
b10101 s"
b10100 m"
b10011 g"
b10010 a"
b10001 ["
b10000 U"
b1111 O"
b1110 I"
b1101 C"
b1100 ="
b1011 7"
b1010 1"
b1001 +"
b1000 %"
b111 }
b110 w
b101 q
b100 k
b11 e
b10 _
b1 Y
b0 S
$end
#0
$dumpvars
b0 :%
b0 9%
b0 8%
b0 7%
b0 6%
b0 5%
b0 4%
b0 3%
b0 2%
b0 1%
b0 0%
b0 /%
b0 .%
b0 -%
b0 ,%
b0 +%
b0 *%
b0 )%
b0 (%
b0 '%
b0 &%
b0 %%
b0 $%
b0 #%
b0 "%
b0 !%
b0 ~$
b0 }$
b0 |$
b0 {$
b0 z$
b0 y$
b0 x$
b0 w$
b1 v$
b111 u$
b111 t$
b0 s$
b0 r$
1q$
b111 p$
b0 o$
b111 n$
b111 m$
b111 l$
b111 k$
b0 j$
b111 i$
b111 h$
b100 g$
b0 f$
b11100000000000010010011 e$
b111 d$
b100000000000 c$
b111 b$
b100000000110 a$
b1 `$
b11100000000000010010011 _$
b10011 ^$
b10000000 ]$
b0 \$
b0 [$
b111 Z$
0Y$
1X$
0W$
0V$
0U$
0T$
b10011 S$
b0 R$
0Q$
b10 P$
0O$
0N$
0M$
0L$
0K$
1J$
0I$
0H$
1G$
0F$
b0 E$
b0 D$
b111 C$
1B$
b11111111111111111111111111111001 A$
b0 @$
b111 ?$
b0 >$
b0 {#
b111 z#
b111 y#
b0 X#
b111 W#
b0 V#
b0 U#
b111 T#
0S#
b111 R#
0P#
0O#
0N#
0M#
1L#
0J#
0I#
0H#
0G#
1F#
0D#
0C#
0B#
0A#
1@#
0>#
0=#
0<#
0;#
1:#
08#
07#
06#
05#
14#
02#
01#
00#
0/#
1.#
0,#
0+#
0*#
0)#
1(#
0&#
0%#
0$#
0##
1"#
0~"
0}"
0|"
0{"
1z"
0x"
0w"
0v"
0u"
1t"
0r"
0q"
0p"
0o"
1n"
0l"
0k"
0j"
0i"
1h"
0f"
0e"
0d"
0c"
1b"
0`"
0_"
0^"
0]"
1\"
0Z"
0Y"
0X"
0W"
1V"
0T"
0S"
0R"
0Q"
1P"
0N"
0M"
0L"
0K"
1J"
0H"
0G"
0F"
0E"
1D"
0B"
0A"
0@"
0?"
1>"
0<"
0;"
0:"
09"
18"
06"
05"
04"
03"
12"
00"
0/"
0."
0-"
1,"
0*"
0)"
0("
0'"
1&"
0$"
0#"
0""
0!"
1~
0|
0{
0z
0y
1x
0v
0u
0t
0s
1r
0p
0o
0n
0m
1l
0j
0i
0h
0g
1f
0d
0c
0b
0a
1`
0^
0]
0\
0[
1Z
0X
0W
0V
0U
1T
0R
0Q
0P
0O
1N
b0 M
b10 L
b111 K
b111 J
b0 I
b111 H
b0 G
b11111111111111111111111111111001 F
b111 E
b0 D
0C
b100 B
b100 A
b0 @
b111 ?
0>
b111 =
b10 <
1;
1:
b111 9
18
07
06
05
04
03
02
11
00
b0 /
b0 .
b0 -
b111 ,
b111 +
b0 *
b11100000000000010010011 )
b111 (
b111 '
b111 &
b100 %
0$
0#
0"
1!
$end
#200
0!
#500
b0 ,
b0 l$
b0 u$
1$
b0 9
b0 E
b0 Z$
b0 k$
b0 H
b0 y#
b0 F
b0 A$
0B$
b0 J
b0 R#
1H$
b0 (
b0 K
b0 T#
b0 W#
b0 z#
b0 ?$
b0 C$
b0 n$
0G$
01
b0 +
b0 ?
b0 d$
b0 m$
b111 -
b111 [$
b111 o$
b111 x$
0;
0:
b100000000000 a$
b0 c$
b0 `$
b1 b$
b100011 ^$
b0 v$
b1 t$
0X$
13
1T$
b100011 S$
b111 '
b111 i$
b111 p$
b100000000000000100011 )
b100000000000000100011 _$
b100000000000000100011 e$
b1011 %
b1011 B
b1011 g$
b111 &
b111 =
b111 h$
b111 *
b111 @
b111 D
b111 f$
b111 r$
b111 z$
10
#1000
00
#1500
10
#2000
00
#2500
10
#3000
00
#3500
10
#4000
00
#4500
10
#5000
00
#5200
